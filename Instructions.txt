The OINK code carries out bootstrapping calculations, simulating epidemics under a variety of model parameters.

Basic idea:

The code takes as input a set of data, which describe the number of cases of an outbreak detected, and the days on which they were detected, beginning with day 0 for the first detected case.  The code then runs a large number of simulations of outbreaks at different R0 values.  Each simulation involves the simulated detection of cases.  

Simultations are evaluated t_o days after the first detected case.  Multiple values of t_o may be tested in a single run, which are specified in a separate file (Data/Time_points.dat), each line of which is a time-point to test. Simulations which match the data in terms of the numbers of detected cases are retained. Note that simulations which are accepted for small k may not be accepted for larger t_o: If a simulation matches the data, but then has an additional case detected 5 days after the last time of the input data, this simulation will be accepted at t_o=4, but not at t_o=6.

For retained simulations a variety of evaluations are made.  How many individuals are infected at time k, and what is the probability the outbreak has died out by this point?  What is the distributions for the time of the initial case of infection given k and the data?  The acceptance rate for different values R0 may be used to construct a basic estimate of this statistic.

Inputs:

The code needs to run in a directory containing the Data subdirectory, which must contain two files.

Detections.dat contains two tab-separated columns containing respectively dates, and a number of detections on each date.  Dates are scaled so that the first day on which a case was detected is day 0.  Note that the code is designed only for use with outbreaks with very small numbers of cases detected; putting in too many cases will not produce successful results.  The example data provided includes a single case, detected on day 0. The code has only been tested with this example data, and may be incorrect or be inefficient with multiple detected cases.

Time_points.dat contains a list of times at which the user wants to evaluate the situation following an outbreak.  This file contains a single column of non-negative integers, in increasing order.  A single number indicates the number of days since the last detection of a case.  Outputs are prodced for each time point specified.

Compiling the code:

make

Install a modern C++ compiler (tested with gcc 11.4.0).

Note that the code requires the GSL library (tested with 2.7.0).  The location of library files may need to be specified by altering the Makefile.

If multiple cores and the OpenMP library are available, then
```
make PARALLEL=1
```

will generate a parallelized version of the code, with threads processing different R0 values simulataneously. Control the number of threads with the OMP_NUM_THREADS environment variable

Running the code:
```
./oink <Options>
```

(or to run in parallel:
```OMP_NUM_THREADS=4 ./oink <Options>
```
)

Options:

--replicas r [Default 10000] : Number of outbreaks to simulate for each value of R0.

--detect d [Default 0.1] : Probability of detecting a case of infection

--detect_enhanced d [Default same as detect] : Probability of detecting a case of infection under enhanced surveillance. Assumed >= detect

--first_detect f [Default same as detect] : Probability of detecting the first case of infection.  For example, it may be known that the first detected case was not the index case, in which case this statistic can be set to zero.

--time_before_enhanced [Default 18] : Number of days after which cases are detected with probability detect_enhanced as a result of enhanced surveillance

--verb v [Default 0] : Produces verbose output.  Mostly used for debugging the code.

--max_R0 [Default 4.0] : Perform simulations up to this value of R0.

--infection_length_min [Default 7] : Lower bound on length of infection (only used to calculate number of infected individuals). Randomly generated for each case on [infection_length_min, infection_length_max]
--infection_length_max [Default 7] : Upper bound on length of infection

--detect_min [Default 18] : Minimum length of time between symptom onset and reporting of a detected case. Randomly generated for each case on [detect_min, detect_max]
--detect_max [Default 18] : Maximum length of time between symptom onset and reporting of a detected case

--more_stats m [Default 0] : Flag to produce output files with more detailed statistics (see below).

--no_limit n [Default 0] : Flag to remove the limit on the number of cases of infection that are simulated.  By default no more than 1000 cases of infection may be initiated in a single day of a simulation.  This makes the code faster to run e.g. in a case where R0 is high, but places a limit on what can be done with the reported numbers of cases (i.e. high numbers become unreliable).

--output_prefix [Default ""] : Flag to add string to start of all output filenames

--input_prefix [Default ""] : Flag to add string to start of all input filenames

Outputs:

A variety of files are produced by the code:

`P_Outbreak_End.dat` describes the estimated probability that the outbreak has died out by each day in Time_points.dat after the last detection of a case.

`Origin_stats_Y.dat` gives the probability distribution for the day on which the first case (as opposed to detected case) was infected, in days prior to the first detection, conditional on the day Y in Time_point
s.dat.  That is, statistics are calculated for simulations that fit the data up to day Y after the detection of the last case.

`Sizes_time_Y.dat` gives the probability distribution for the number of infected people Y days after the detection of the last case.

`Acceptance_rateX.dat` gives the proportion of simulations which matched the data for each day in Time_points.dat, given an R0 of X/10.

If --more_stats 1 is specified, other outputs are generated:

`End_probX.dat` gives the estimated probability that the outbreak has died out for each day in Time_points.dat, given an R0 of X/10.

`Origin_timesX.dat` gives the raw values for the time (relative to that of the first detection) on which the first case was infected, for each day in Time_points.day, given an R0 of X/10.

`Current_sizeX.dat` gives the raw values for the size of the outbreak (number of infected people), for each day in Time_points.dat, given an R0 of X/10.

Reproducing the results in the paper:

SLURM submission scripts are provided (submit_slurm.sh for results in main figure, submit_slurm_extra_1.sh, submit_slurm_extra_2.sh, submit_slurm_extra_3.sh for results in the supplementary data). Alternatively, the bash scripts run_simulations_slurm.sh, run_simulations_extra_1.sh, run_simulations_extra_2.sh, run_simulations_extra_3.sh) can be run directly.
For a smaller-scale test, the script run_simulations.sh will only generate 10000 replicas for each R0 value. The environment variable OMP_NUM_THREADS may need to be changed according to the number of cores availale on the machine.

To plot the graphs, if necessary (i.e if run on a cluster) copy the output directories (output, output2, output_enhanced_detection, output_detection_delay, output_variable_infection_length) to the root directory of the repository and use the Mathematica notebook Analysis/OutputAnalysis.nb

Alternatively, the Python scripts in `python_scripts/` may be used


Python environment requires Python 3 (tested on 3.10.9) `numpy`, `scipy`, `matplotlib` and `weightedstats`; install these via pip or conda.

For Figure 1, after running the simulations (`run_simulations_slurm.sh`)
```
python python_scripts/plot_data_single.py output/
```
For the supplementary figures (with slightly different formatting)

```
python python_scripts/plot_S1.py
python python_scripts/plot_S2.py
python python_scripts/plot_S3.py
```
for the remaining supplementary figures
```
python python_scripts/plot_data_single.py output_variable_detection_delay/
python python_scripts/plot_data_single.py output_enhanced_detection/
pyth

Extra scripts:

julia_alternative_simulations contains simulations in Julia `Oink.jl` and `Oink_timepoint.jl`, which perform simplified simulations.
These do not consider the simulation up to the final accepted time, but only until the simulation definitely matches / does not match the data.
They are suitable for estimating R0 and the spillover date. As the do not need to simulate each outbreak for as long, they can terminating the simulation earlier, and Oink_timepoint.jl uses a heap rather than a list for computational efficiency

```
bash scripts/run_julia_simulation.sh
python python_scripts/compare_with_julia.py
```

If Mathematica is unavailable alternative plotting scripts are available
```
python plot_data_single.py output/
```

In the case where the observation day is infinitely long after the first detection, the distribution of R0 can be calculated without simulation
```
python python_scripts/exact_posterior.py
```
which compares this with the results from those generated by `Oink.jl`

